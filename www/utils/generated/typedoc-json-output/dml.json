{
	"id": 38273,
	"name": "dml",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 38274,
			"name": "entity-builder",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 38275,
					"name": "DefineOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 38276,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 38277,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The data model's name."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 38278,
											"name": "tableName",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The name of the data model's table in the database."
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												38277,
												38278
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 38279,
					"name": "ManyToManyOptions",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "RelationshipOptions"
								},
								"name": "RelationshipOptions",
								"package": "@medusajs/types"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "reflection",
										"declaration": {
											"id": 38280,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 38281,
													"name": "pivotTable",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The name of the pivot table\ncreated in the database for this relationship."
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 38283,
													"name": "joinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table that for the current entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 38284,
													"name": "inverseJoinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table for the opposite entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														38281,
														38283,
														38284
													]
												}
											]
										}
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 38285,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 38287,
													"name": "pivotEntity",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "A function that returns the data model\nrepresenting the pivot table created in the\ndatabase for this relationship."
															}
														]
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 38288,
															"name": "__type",
															"variant": "declaration",
															"kind": 65536,
															"flags": {},
															"signatures": [
																{
																	"id": 38289,
																	"name": "__type",
																	"variant": "signature",
																	"kind": 4096,
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"target": 38374,
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			},
																			{
																				"type": "intrinsic",
																				"name": "any"
																			}
																		],
																		"name": "DmlEntity",
																		"package": "@medusajs/utils"
																	}
																}
															]
														}
													}
												},
												{
													"id": 38290,
													"name": "joinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table that for the current entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												},
												{
													"id": 38291,
													"name": "inverseJoinColumn",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"comment": {
														"summary": [
															{
																"kind": "text",
																"text": "The column name in the pivot table for the opposite entity"
															}
														]
													},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														38287,
														38290,
														38291
													]
												}
											]
										}
									}
								]
							}
						]
					}
				},
				{
					"id": 38292,
					"name": "EntityBuilder",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Entity builder exposes the API to create an entity and define its\nschema using the shorthand methods."
							}
						]
					},
					"children": [
						{
							"id": 38293,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 38294,
									"name": "EntityBuilder",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"type": {
										"type": "reference",
										"target": 38292,
										"name": "EntityBuilder",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 38298,
							"name": "define",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 38299,
									"name": "define",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "This method defines a data model."
											}
										],
										"blockTags": [
											{
												"tag": "@example",
												"content": [
													{
														"kind": "code",
														"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n})\n\nexport default MyCustom\n```"
													}
												]
											}
										]
									},
									"typeParameters": [
										{
											"id": 38300,
											"name": "Schema",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The type of the accepted schema in the second parameter of the method."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "DMLSchema"
												},
												"name": "DMLSchema",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 38301,
											"name": "TConfig",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isConst": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "IDmlEntityConfig"
												},
												"name": "IDmlEntityConfig",
												"package": "@medusajs/types"
											}
										}
									],
									"parameters": [
										{
											"id": 38302,
											"name": "nameOrConfig",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "Either the data model's name, or configurations to name the data model.\nThe data model's name must be unique."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 38301,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 38303,
											"name": "schema",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"comment": {
												"summary": [
													{
														"kind": "text",
														"text": "The schema of the data model's properties."
													}
												]
											},
											"type": {
												"type": "reference",
												"target": 38300,
												"name": "Schema",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 38374,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38372,
												"typeArguments": [
													{
														"type": "reference",
														"target": 38300,
														"name": "Schema",
														"package": "@medusajs/utils",
														"refersToTypeParameter": true
													}
												],
												"name": "DMLEntitySchemaBuilder",
												"package": "@medusajs/utils"
											},
											{
												"type": "reference",
												"target": 38301,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								38293
							]
						},
						{
							"title": "Methods",
							"children": [
								38298,
								38304,
								38309,
								38311,
								38313,
								38315,
								38317,
								38319,
								38321,
								38323,
								38325,
								38327,
								38331,
								38350,
								38360,
								38365
							]
						}
					]
				},
				{
					"id": 38370,
					"name": "model",
					"variant": "declaration",
					"kind": 32,
					"flags": {
						"isConst": true
					},
					"type": {
						"type": "reference",
						"target": 38292,
						"name": "EntityBuilder",
						"package": "@medusajs/utils"
					},
					"defaultValue": "..."
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						38292
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						38275,
						38279
					]
				},
				{
					"title": "Variables",
					"children": [
						38370
					]
				}
			]
		},
		{
			"id": 38371,
			"name": "entity",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 38372,
					"name": "DMLEntitySchemaBuilder",
					"variant": "declaration",
					"kind": 2097152,
					"flags": {},
					"typeParameters": [
						{
							"id": 38373,
							"name": "Schema",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "DMLSchema"
								},
								"name": "DMLSchema",
								"package": "@medusajs/types"
							}
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-big-number-properties.ts",
									"qualifiedName": "DMLSchemaWithBigNumber"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38373,
										"name": "Schema",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "DMLSchemaWithBigNumber",
								"package": "@medusajs/utils"
							},
							{
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/helpers/entity-builder/create-default-properties.ts",
									"qualifiedName": "DMLSchemaDefaults"
								},
								"name": "DMLSchemaDefaults",
								"package": "@medusajs/utils"
							},
							{
								"type": "reference",
								"target": 38373,
								"name": "Schema",
								"package": "@medusajs/utils",
								"refersToTypeParameter": true
							}
						]
					}
				},
				{
					"id": 38374,
					"name": "DmlEntity",
					"variant": "declaration",
					"kind": 128,
					"flags": {},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Dml entity is a representation of a DML model with a unique\nname, its schema and relationships."
							}
						]
					},
					"children": [
						{
							"id": 38408,
							"name": "[IsDmlEntity]",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "true"
						},
						{
							"id": 38384,
							"name": "name",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "InferDmlEntityNameFromConfig"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38381,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "InferDmlEntityNameFromConfig",
								"package": "@medusajs/types"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IDmlEntity.name"
							}
						},
						{
							"id": 38385,
							"name": "schema",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 38380,
								"name": "Schema",
								"package": "@medusajs/utils",
								"qualifiedName": "DmlEntity.Schema",
								"refersToTypeParameter": true
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IDmlEntity.schema"
							}
						},
						{
							"id": 38378,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 38379,
									"name": "DmlEntity",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"typeParameters": [
										{
											"id": 38380,
											"name": "Schema",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "DMLSchema"
												},
												"name": "DMLSchema",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 38381,
											"name": "TConfig",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {
												"isConst": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "IDmlEntityConfig"
												},
												"name": "IDmlEntityConfig",
												"package": "@medusajs/types"
											}
										}
									],
									"parameters": [
										{
											"id": 38382,
											"name": "nameOrConfig",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 38381,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										},
										{
											"id": 38383,
											"name": "schema",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "reference",
												"target": 38380,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 38374,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38380,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 38381,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 38375,
							"name": "isDmlEntity",
							"variant": "declaration",
							"kind": 2048,
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 38376,
									"name": "isDmlEntity",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A static method to check if an entity is an instance of DmlEntity.\nIt allows us to identify a specific object as being an instance of\nDmlEntity."
											}
										]
									},
									"parameters": [
										{
											"id": 38377,
											"name": "entity",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "unknown"
											}
										}
									],
									"type": {
										"type": "predicate",
										"name": "entity",
										"asserts": false,
										"targetType": {
											"type": "reference",
											"target": 38374,
											"typeArguments": [
												{
													"type": "intrinsic",
													"name": "any"
												},
												{
													"type": "intrinsic",
													"name": "any"
												}
											],
											"name": "DmlEntity",
											"package": "@medusajs/utils"
										}
									}
								}
							]
						},
						{
							"id": 38390,
							"name": "parse",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 38391,
									"name": "parse",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Parse entity to get its underlying information"
											}
										]
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38392,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 38393,
													"name": "name",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "InferDmlEntityNameFromConfig"
														},
														"typeArguments": [
															{
																"type": "reference",
																"target": 38381,
																"name": "TConfig",
																"package": "@medusajs/utils",
																"qualifiedName": "DmlEntity.TConfig",
																"refersToTypeParameter": true
															}
														],
														"name": "InferDmlEntityNameFromConfig",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 38394,
													"name": "tableName",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 38395,
													"name": "schema",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "DMLSchema"
														},
														"name": "DMLSchema",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 38396,
													"name": "cascades",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
															"qualifiedName": "EntityCascades"
														},
														"typeArguments": [
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															},
															{
																"type": "array",
																"elementType": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"name": "EntityCascades",
														"package": "@medusajs/types"
													}
												},
												{
													"id": 38397,
													"name": "indexes",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "EntityIndex"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 38380,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "EntityIndex",
															"package": "@medusajs/types"
														}
													}
												},
												{
													"id": 38398,
													"name": "checks",
													"variant": "declaration",
													"kind": 1024,
													"flags": {},
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "CheckConstraint"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 38380,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "CheckConstraint",
															"package": "@medusajs/types"
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														38393,
														38394,
														38395,
														38396,
														38397,
														38398
													]
												}
											]
										}
									}
								}
							]
						},
						{
							"id": 38405,
							"name": "checks",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 38406,
									"name": "checks",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"parameters": [
										{
											"id": 38407,
											"name": "checks",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "array",
												"elementType": {
													"type": "reference",
													"target": {
														"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
														"qualifiedName": "CheckConstraint"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": 38380,
															"name": "Schema",
															"package": "@medusajs/utils",
															"qualifiedName": "DmlEntity.Schema",
															"refersToTypeParameter": true
														}
													],
													"name": "CheckConstraint",
													"package": "@medusajs/types"
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"target": 38374,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38380,
												"name": "Schema",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.Schema",
												"refersToTypeParameter": true
											},
											{
												"type": "reference",
												"target": 38381,
												"name": "TConfig",
												"package": "@medusajs/utils",
												"qualifiedName": "DmlEntity.TConfig",
												"refersToTypeParameter": true
											}
										],
										"name": "DmlEntity",
										"package": "@medusajs/utils"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								38378
							]
						},
						{
							"title": "Properties",
							"children": [
								38408,
								38384,
								38385
							]
						},
						{
							"title": "Methods",
							"children": [
								38375,
								38390,
								38399,
								38402,
								38405
							]
						}
					],
					"typeParameters": [
						{
							"id": 38409,
							"name": "Schema",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "DMLSchema"
								},
								"name": "DMLSchema",
								"package": "@medusajs/types"
							}
						},
						{
							"id": 38410,
							"name": "TConfig",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {
								"isConst": true
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
									"qualifiedName": "IDmlEntityConfig"
								},
								"name": "IDmlEntityConfig",
								"package": "@medusajs/types"
							}
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
								"qualifiedName": "IDmlEntity"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 38380,
									"name": "Schema",
									"package": "@medusajs/utils",
									"qualifiedName": "DmlEntity.Schema",
									"refersToTypeParameter": true
								},
								{
									"type": "reference",
									"target": 38381,
									"name": "TConfig",
									"package": "@medusajs/utils",
									"qualifiedName": "DmlEntity.TConfig",
									"refersToTypeParameter": true
								}
							],
							"name": "IDmlEntity",
							"package": "@medusajs/types"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						38374
					]
				},
				{
					"title": "Type Aliases",
					"children": [
						38372
					]
				}
			]
		},
		{
			"id": 38411,
			"name": "properties/base",
			"variant": "declaration",
			"kind": 2,
			"flags": {},
			"children": [
				{
					"id": 38412,
					"name": "BaseProperty",
					"variant": "declaration",
					"kind": 128,
					"flags": {
						"isAbstract": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "The BaseProperty class offers shared affordances to define\nproperty classes"
							}
						]
					},
					"children": [
						{
							"id": 38413,
							"name": "constructor",
							"variant": "declaration",
							"kind": 512,
							"flags": {},
							"signatures": [
								{
									"id": 38414,
									"name": "BaseProperty",
									"variant": "signature",
									"kind": 16384,
									"flags": {},
									"typeParameters": [
										{
											"id": 38415,
											"name": "T",
											"variant": "typeParam",
											"kind": 131072,
											"flags": {}
										}
									],
									"type": {
										"type": "reference",
										"target": 38412,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38415,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										],
										"name": "BaseProperty",
										"package": "@medusajs/utils"
									}
								}
							]
						},
						{
							"id": 38422,
							"name": "dataType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {
								"isProtected": true,
								"isAbstract": true
							},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "The runtime dataType for the schema. It is not the same as\nthe \"$dataType\"."
									}
								]
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 38423,
									"name": "__type",
									"variant": "declaration",
									"kind": 65536,
									"flags": {},
									"children": [
										{
											"id": 38424,
											"name": "name",
											"variant": "declaration",
											"kind": 1024,
											"flags": {},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "KnownDataTypes"
												},
												"name": "KnownDataTypes",
												"package": "@medusajs/types"
											}
										},
										{
											"id": 38425,
											"name": "options",
											"variant": "declaration",
											"kind": 1024,
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"children": [
												38424,
												38425
											]
										}
									]
								}
							}
						},
						{
							"id": 38426,
							"name": "$dataType",
							"variant": "declaration",
							"kind": 1024,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "A type-only property to infer the JavScript data-type\nof the schema property"
									}
								]
							},
							"type": {
								"type": "reference",
								"target": 38415,
								"name": "T",
								"package": "@medusajs/utils",
								"qualifiedName": "BaseProperty.T",
								"refersToTypeParameter": true
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "PropertyType.$dataType"
							}
						},
						{
							"id": 38440,
							"name": "parse",
							"variant": "declaration",
							"kind": 2048,
							"flags": {},
							"signatures": [
								{
									"id": 38441,
									"name": "parse",
									"variant": "signature",
									"kind": 4096,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Returns the serialized metadata"
											}
										]
									},
									"parameters": [
										{
											"id": 38442,
											"name": "fieldName",
											"variant": "param",
											"kind": 32768,
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "PropertyMetadata"
										},
										"name": "PropertyMetadata",
										"package": "@medusajs/types"
									},
									"implementationOf": {
										"type": "reference",
										"target": -1,
										"name": "PropertyType.parse"
									}
								}
							],
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "PropertyType.parse"
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"children": [
								38413
							]
						},
						{
							"title": "Properties",
							"children": [
								38422,
								38426
							]
						},
						{
							"title": "Methods",
							"children": [
								38427,
								38429,
								38431,
								38434,
								38437,
								38440
							]
						}
					],
					"typeParameters": [
						{
							"id": 38443,
							"name": "T",
							"variant": "typeParam",
							"kind": 131072,
							"flags": {}
						}
					],
					"implementedTypes": [
						{
							"type": "reference",
							"target": {
								"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
								"qualifiedName": "PropertyType"
							},
							"typeArguments": [
								{
									"type": "reference",
									"target": 38415,
									"name": "T",
									"package": "@medusajs/utils",
									"qualifiedName": "BaseProperty.T",
									"refersToTypeParameter": true
								}
							],
							"name": "PropertyType",
							"package": "@medusajs/types"
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"children": [
						38412
					]
				}
			]
		},
		{
			"id": 38444,
			"name": "Property Types",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 38304,
					"name": "id",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38305,
							"name": "id",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an automatically generated string ID property.\n\nYou must use the \"primaryKey\" modifier to mark the property as the\nprimary key."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"User\", {\n  id: model.id().primaryKey(),\n  // ...\n})\n\nexport default User\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38306,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38307,
											"name": "__type",
											"variant": "declaration",
											"kind": 65536,
											"flags": {},
											"children": [
												{
													"id": 38308,
													"name": "prefix",
													"variant": "declaration",
													"kind": 1024,
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"children": [
														38308
													]
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/id.ts",
									"qualifiedName": "IdProperty"
								},
								"name": "IdProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38309,
					"name": "text",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38310,
							"name": "text",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a string property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  name: model.text(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/text.ts",
									"qualifiedName": "TextProperty"
								},
								"name": "TextProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38311,
					"name": "boolean",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38312,
							"name": "boolean",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a boolean property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  hasAccount: model.boolean(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/boolean.ts",
									"qualifiedName": "BooleanProperty"
								},
								"name": "BooleanProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38313,
					"name": "number",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38314,
							"name": "number",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a number property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  age: model.number(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/number.ts",
									"qualifiedName": "NumberProperty"
								},
								"name": "NumberProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38315,
					"name": "bigNumber",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38316,
							"name": "bigNumber",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a number property that expects large numbers, such as prices."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  price: model.bigNumber(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/big-number.ts",
									"qualifiedName": "BigNumberProperty"
								},
								"name": "BigNumberProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38317,
					"name": "float",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38318,
							"name": "float",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a float property that allows for\nvalues with decimal places"
									}
								],
								"blockTags": [
									{
										"tag": "@version",
										"content": [
											{
												"kind": "text",
												"text": "2.1.2"
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"tax\", {\n  tax_rate: model.float(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/float.ts",
									"qualifiedName": "FloatProperty"
								},
								"name": "FloatProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38321,
					"name": "array",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38322,
							"name": "array",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an array of strings property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  names: model.array(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/array.ts",
									"qualifiedName": "ArrayProperty"
								},
								"name": "ArrayProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38323,
					"name": "dateTime",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38324,
							"name": "dateTime",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a timestamp property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  date_of_birth: model.dateTime(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/date-time.ts",
									"qualifiedName": "DateTimeProperty"
								},
								"name": "DateTimeProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38325,
					"name": "json",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38326,
							"name": "json",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a property whose value is a stringified JSON object."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  metadata: model.json(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/json.ts",
									"qualifiedName": "JSONProperty"
								},
								"name": "JSONProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38327,
					"name": "enum",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38328,
							"name": "enum",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a property whose value can only be one of the specified values."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  color: model.enum([\"black\", \"white\"]),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38329,
									"name": "Values",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isConst": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of possible values. By default, it's "
											},
											{
												"kind": "code",
												"text": "`string`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "array",
												"elementType": {
													"type": "intrinsic",
													"name": "unknown"
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/utils/src/dml/properties/enum.ts",
													"qualifiedName": "EnumLike"
												},
												"name": "EnumLike",
												"package": "@medusajs/utils"
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 38330,
									"name": "values",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "An array of possible values."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38329,
										"name": "Values",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/enum.ts",
									"qualifiedName": "EnumProperty"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38329,
										"name": "Values",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "EnumProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						38304,
						38309,
						38311,
						38313,
						38315,
						38317,
						38321,
						38323,
						38325,
						38327
					]
				}
			]
		},
		{
			"id": 38445,
			"name": "Property",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 38319,
					"name": "autoincrement",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38320,
							"name": "autoincrement",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an autoincrement property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  serial_id: model.autoincrement(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/autoincrement.ts",
									"qualifiedName": "AutoIncrementProperty"
								},
								"name": "AutoIncrementProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						38319
					]
				}
			]
		},
		{
			"id": 38446,
			"name": "Relationship Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 38331,
					"name": "hasOne",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38332,
							"name": "hasOne",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere the owner of the relationship has one record of the related\ndata model.\n\nFor example: A user \"hasOne\" email.\n\nUse the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "belongsTo",
										"target": 38350
									},
									{
										"kind": "text",
										"text": " method to define the inverse of this relationship in\nthe other data model."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"user\", {\n  id: model.id(),\n  email: model.hasOne(() => Email),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38333,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								},
								{
									"id": 38334,
									"name": "ForeignKeyName",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isConst": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"default": {
										"type": "intrinsic",
										"name": "undefined"
									}
								}
							],
							"parameters": [
								{
									"id": 38335,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38333,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38336,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 38337,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38338,
															"name": "mappedBy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The name of the relationship as defined in the other\ndata model. This is only required by the "
																	},
																	{
																		"kind": "code",
																		"text": "`belongsTo`"
																	},
																	{
																		"kind": "text",
																		"text": " and "
																	},
																	{
																		"kind": "code",
																		"text": "`manyToMany`"
																	},
																	{
																		"kind": "text",
																		"text": "\nrelationship method."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38338
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 38339,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38340,
															"name": "foreignKey",
															"variant": "declaration",
															"kind": 1024,
															"flags": {},
															"type": {
																"type": "literal",
																"value": true
															}
														},
														{
															"id": 38341,
															"name": "foreignKeyName",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"target": 38334,
																"name": "ForeignKeyName",
																"package": "@medusajs/utils",
																"refersToTypeParameter": true
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38340,
																38341
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-one-fk.ts",
									"qualifiedName": "HasOneWithForeignKey"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38333,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38334,
										"name": "ForeignKeyName",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasOneWithForeignKey",
								"package": "@medusajs/utils"
							}
						},
						{
							"id": 38342,
							"name": "hasOne",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere the owner of the relationship has one record of the related\ndata model.\n\nFor example: A user \"hasOne\" email.\n\nUse the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "belongsTo",
										"target": 38350
									},
									{
										"kind": "text",
										"text": " method to define the inverse of this relationship in\nthe other data model."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"user\", {\n  id: model.id(),\n  email: model.hasOne(() => Email),\n})\n```"
											}
										]
									},
									{
										"tag": "@customNamespace",
										"content": [
											{
												"kind": "text",
												"text": "Relationship Methods"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38343,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 38344,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38343,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38345,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 38346,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38347,
															"name": "mappedBy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The name of the relationship as defined in the other\ndata model. This is only required by the "
																	},
																	{
																		"kind": "code",
																		"text": "`belongsTo`"
																	},
																	{
																		"kind": "text",
																		"text": " and "
																	},
																	{
																		"kind": "code",
																		"text": "`manyToMany`"
																	},
																	{
																		"kind": "text",
																		"text": "\nrelationship method."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38347
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 38348,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38349,
															"name": "foreignKey",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "literal",
																"value": false
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38349
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-one.ts",
									"qualifiedName": "HasOne"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38343,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasOne",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38350,
					"name": "belongsTo",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38351,
							"name": "belongsTo",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines the inverse of the "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "hasOne",
										"target": 38331
									},
									{
										"kind": "text",
										"text": " or "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "hasMany",
										"target": 38360
									},
									{
										"kind": "text",
										"text": " relationship.\n\nFor example, a product \"belongsTo\" a store."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Product = model.define(\"product\", {\n  id: model.id(),\n  store: model.belongsTo(() => Store, {\n    mappedBy: \"products\",\n  }),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38352,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								},
								{
									"id": 38353,
									"name": "ForeignKeyName",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {
										"isConst": true
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									},
									"default": {
										"type": "intrinsic",
										"name": "undefined"
									}
								}
							],
							"parameters": [
								{
									"id": 38354,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38352,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38355,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reflection",
												"declaration": {
													"id": 38356,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38357,
															"name": "mappedBy",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"comment": {
																"summary": [
																	{
																		"kind": "text",
																		"text": "The name of the relationship as defined in the other\ndata model. This is only required by the "
																	},
																	{
																		"kind": "code",
																		"text": "`belongsTo`"
																	},
																	{
																		"kind": "text",
																		"text": " and "
																	},
																	{
																		"kind": "code",
																		"text": "`manyToMany`"
																	},
																	{
																		"kind": "text",
																		"text": "\nrelationship method."
																	}
																]
															},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38357
															]
														}
													]
												}
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Record"
												},
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record",
												"package": "typescript"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 38358,
													"name": "__type",
													"variant": "declaration",
													"kind": 65536,
													"flags": {},
													"children": [
														{
															"id": 38359,
															"name": "foreignKeyName",
															"variant": "declaration",
															"kind": 1024,
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reference",
																"target": 38353,
																"name": "ForeignKeyName",
																"package": "@medusajs/utils",
																"refersToTypeParameter": true
															}
														}
													],
													"groups": [
														{
															"title": "Properties",
															"children": [
																38359
															]
														}
													]
												}
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/belongs-to.ts",
									"qualifiedName": "BelongsTo"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38352,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38353,
										"name": "ForeignKeyName",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "BelongsTo",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38360,
					"name": "hasMany",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38361,
							"name": "hasMany",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere the owner of the relationship has many records of the related\ndata model, but the related data model only has one owner.\n\nFor example, a store \"hasMany\" products."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Store = model.define(\"store\", {\n  id: model.id(),\n  products: model.hasMany(() => Product),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38362,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 38363,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38362,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38364,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "RelationshipOptions"
										},
										"name": "RelationshipOptions",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/has-many.ts",
									"qualifiedName": "HasMany"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38362,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "HasMany",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38365,
					"name": "manyToMany",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38366,
							"name": "manyToMany",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines a relationship between two data models,\nwhere both data models have many related records.\n\nFor example, an order is associated with many products, and a product\nis associated with many orders."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Order = model.define(\"order\", {\n  id: model.id(),\n  products: model.manyToMany(() => Product),\n})\n\nconst Product = model.define(\"product\", {\n  id: model.id(),\n  order: model.manyToMany(() => Order),\n})\n```"
											}
										]
									}
								]
							},
							"typeParameters": [
								{
									"id": 38367,
									"name": "T",
									"variant": "typeParam",
									"kind": 131072,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The type of the entity builder passed as a first parameter. By default, it's\na function returning the related model."
											}
										]
									}
								}
							],
							"parameters": [
								{
									"id": 38368,
									"name": "entityBuilder",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "A function that returns the data model this model is related to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38367,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								},
								{
									"id": 38369,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The relationship's options."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38279,
										"name": "ManyToManyOptions",
										"package": "@medusajs/utils"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/relations/many-to-many.ts",
									"qualifiedName": "ManyToMany"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38367,
										"name": "T",
										"package": "@medusajs/utils",
										"refersToTypeParameter": true
									}
								],
								"name": "ManyToMany",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						38331,
						38350,
						38360,
						38365
					]
				}
			]
		},
		{
			"id": 38447,
			"name": "Model Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 38399,
					"name": "cascades",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38400,
							"name": "cascades",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method configures which related data models an operation, such as deletion,\nshould be cascaded to.\n\nFor example, if a store is deleted, its product should also be deleted."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst Store = model.define(\"store\", {\n  id: model.id(),\n  products: model.hasMany(() => Product),\n})\n.cascades({\n  delete: [\"products\"],\n})\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38401,
									"name": "options",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The cascades configurations. They object's keys are the names of\nthe actions, such as "
											},
											{
												"kind": "code",
												"text": "`deleted`"
											},
											{
												"kind": "text",
												"text": ", and the value is an array of relations that the\naction should be cascaded to."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
											"qualifiedName": "EntityCascades"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "ExtractEntityRelations"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 38380,
														"name": "Schema",
														"package": "@medusajs/utils",
														"qualifiedName": "DmlEntity.Schema",
														"refersToTypeParameter": true
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "hasOne"
															},
															{
																"type": "literal",
																"value": "hasOneWithFK"
															},
															{
																"type": "literal",
																"value": "hasMany"
															}
														]
													}
												],
												"name": "ExtractEntityRelations",
												"package": "@medusajs/types"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
													"qualifiedName": "ExtractEntityRelations"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": 38380,
														"name": "Schema",
														"package": "@medusajs/utils",
														"qualifiedName": "DmlEntity.Schema",
														"refersToTypeParameter": true
													},
													{
														"type": "literal",
														"value": "manyToMany"
													}
												],
												"name": "ExtractEntityRelations",
												"package": "@medusajs/types"
											}
										],
										"name": "EntityCascades",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38374,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38380,
										"name": "Schema",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.Schema",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38381,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "DmlEntity",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38402,
					"name": "indexes",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38403,
							"name": "indexes",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines indices on the data model. An index can be on multiple columns\nand have conditions."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "text",
												"text": "An example of a simple index:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nTo add a condition on the index, use the "
											},
											{
												"kind": "code",
												"text": "`where`"
											},
											{
												"kind": "text",
												"text": " option:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n    where: {\n      age: 30\n    }\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nThe condition can also be a negation. For example:\n\n"
											},
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text(),\n  age: model.number()\n}).indexes([\n  {\n    on: [\"name\", \"age\"],\n    where: {\n      age: {\n        $ne: 30\n      }\n    }\n  },\n])\n\nexport default MyCustom\n```"
											},
											{
												"kind": "text",
												"text": "\n\nIn this example, the index is created when the value of "
											},
											{
												"kind": "code",
												"text": "`age`"
											},
											{
												"kind": "text",
												"text": " doesn't equal "
											},
											{
												"kind": "code",
												"text": "`30`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38404,
									"name": "indexes",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The index's configuration."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
												"qualifiedName": "EntityIndex"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": 38380,
													"name": "Schema",
													"package": "@medusajs/utils",
													"qualifiedName": "DmlEntity.Schema",
													"refersToTypeParameter": true
												},
												{
													"type": "union",
													"types": [
														{
															"type": "intrinsic",
															"name": "string"
														},
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
																"qualifiedName": "QueryCondition"
															},
															"typeArguments": [
																{
																	"type": "reference",
																	"target": 38380,
																	"name": "Schema",
																	"package": "@medusajs/utils",
																	"qualifiedName": "DmlEntity.Schema",
																	"refersToTypeParameter": true
																}
															],
															"name": "QueryCondition",
															"package": "@medusajs/types"
														}
													]
												}
											],
											"name": "EntityIndex",
											"package": "@medusajs/types"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38374,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38380,
										"name": "Schema",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.Schema",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38381,
										"name": "TConfig",
										"package": "@medusajs/utils",
										"qualifiedName": "DmlEntity.TConfig",
										"refersToTypeParameter": true
									}
								],
								"name": "DmlEntity",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						38399,
						38402
					]
				}
			]
		},
		{
			"id": 38448,
			"name": "Property Configuration Methods",
			"variant": "declaration",
			"kind": 4,
			"flags": {},
			"children": [
				{
					"id": 38427,
					"name": "nullable",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38428,
							"name": "nullable",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicates that a property's value can be "
									},
									{
										"kind": "code",
										"text": "`null`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  price: model.bigNumber().nullable(),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/nullable.ts",
									"qualifiedName": "NullableModifier"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": 38415,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									},
									{
										"type": "reference",
										"target": 38412,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38415,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										],
										"name": "BaseProperty",
										"package": "@medusajs/utils"
									}
								],
								"name": "NullableModifier",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38429,
					"name": "computed",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38430,
							"name": "computed",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicated that the property is a computed property.\nComputed properties are not stored in the database but are\ncomputed on the fly."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n calculated_price: model.bigNumber().computed(),\n // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../../../packages/core/utils/src/dml/properties/computed.ts",
									"qualifiedName": "ComputedProperty"
								},
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"target": 38415,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										]
									},
									{
										"type": "reference",
										"target": 38412,
										"typeArguments": [
											{
												"type": "reference",
												"target": 38415,
												"name": "T",
												"package": "@medusajs/utils",
												"qualifiedName": "BaseProperty.T",
												"refersToTypeParameter": true
											}
										],
										"name": "BaseProperty",
										"package": "@medusajs/utils"
									}
								],
								"name": "ComputedProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38431,
					"name": "index",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38432,
							"name": "index",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines an index on a property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  id: model.id(),\n  name: model.text().index(\n    \"IDX_MY_CUSTOM_NAME\"\n  ),\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38433,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The index's name. If not provided,\nMedusa generates the name."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38412,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38415,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38434,
					"name": "unique",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38435,
							"name": "unique",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method indicates that a property's value must be unique in the database.\nA unique index is created on the property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst User = model.define(\"user\", {\n  email: model.text().unique(),\n  // ...\n})\n\nexport default User\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38436,
									"name": "name",
									"variant": "param",
									"kind": 32768,
									"flags": {
										"isOptional": true
									},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The unique index's name. If not provided,\nMedusa generates the name."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38412,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38415,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 38437,
					"name": "default",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"signatures": [
						{
							"id": 38438,
							"name": "default",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method defines the default value of a property."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { model } from \"@medusajs/framework/utils\"\n\nconst MyCustom = model.define(\"my_custom\", {\n  color: model\n    .enum([\"black\", \"white\"])\n    .default(\"black\"),\n  age: model\n    .number()\n    .default(0),\n  // ...\n})\n\nexport default MyCustom\n```"
											}
										]
									}
								]
							},
							"parameters": [
								{
									"id": 38439,
									"name": "value",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The default value."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": 38415,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								}
							],
							"type": {
								"type": "reference",
								"target": 38412,
								"typeArguments": [
									{
										"type": "reference",
										"target": 38415,
										"name": "T",
										"package": "@medusajs/utils",
										"qualifiedName": "BaseProperty.T",
										"refersToTypeParameter": true
									}
								],
								"name": "BaseProperty",
								"package": "@medusajs/utils"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"children": [
						38427,
						38429,
						38431,
						38434,
						38437
					]
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"children": [
				38274,
				38371,
				38411
			]
		},
		{
			"title": "Namespaces",
			"children": [
				38444,
				38445,
				38446,
				38447,
				38448
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"38274": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": ""
		},
		"38275": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "DefineOptions"
		},
		"38276": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38277": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.name"
		},
		"38278": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.tableName"
		},
		"38279": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "ManyToManyOptions"
		},
		"38280": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38281": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.pivotTable"
		},
		"38283": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.joinColumn"
		},
		"38284": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.inverseJoinColumn"
		},
		"38285": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38287": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.pivotEntity"
		},
		"38288": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38289": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38290": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.joinColumn"
		},
		"38291": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.inverseJoinColumn"
		},
		"38292": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder"
		},
		"38298": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.define"
		},
		"38299": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.define"
		},
		"38300": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "Schema"
		},
		"38301": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "TConfig"
		},
		"38302": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "nameOrConfig"
		},
		"38303": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "schema"
		},
		"38304": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.id"
		},
		"38305": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.id"
		},
		"38306": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38307": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38308": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.prefix"
		},
		"38309": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.text"
		},
		"38310": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.text"
		},
		"38311": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.boolean"
		},
		"38312": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.boolean"
		},
		"38313": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.number"
		},
		"38314": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.number"
		},
		"38315": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.bigNumber"
		},
		"38316": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.bigNumber"
		},
		"38317": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.float"
		},
		"38318": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.float"
		},
		"38319": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.autoincrement"
		},
		"38320": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.autoincrement"
		},
		"38321": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.array"
		},
		"38322": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.array"
		},
		"38323": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.dateTime"
		},
		"38324": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.dateTime"
		},
		"38325": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.json"
		},
		"38326": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.json"
		},
		"38327": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.enum"
		},
		"38328": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.enum"
		},
		"38329": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "Values"
		},
		"38330": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "values"
		},
		"38331": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"38332": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"38333": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"38334": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "ForeignKeyName"
		},
		"38335": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"38336": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38337": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"38338": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.mappedBy"
		},
		"38339": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38340": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"38341": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKeyName"
		},
		"38342": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasOne"
		},
		"38343": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"38344": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"38345": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38346": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"38347": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.mappedBy"
		},
		"38348": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38349": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKey"
		},
		"38350": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.belongsTo"
		},
		"38351": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.belongsTo"
		},
		"38352": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"38353": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "ForeignKeyName"
		},
		"38354": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"38355": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38356": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"38357": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.mappedBy"
		},
		"38358": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type"
		},
		"38359": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "__type.foreignKeyName"
		},
		"38360": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasMany"
		},
		"38361": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.hasMany"
		},
		"38362": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"38363": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"38364": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38365": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.manyToMany"
		},
		"38366": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "EntityBuilder.manyToMany"
		},
		"38367": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "T"
		},
		"38368": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "entityBuilder"
		},
		"38369": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "options"
		},
		"38370": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"qualifiedName": "model"
		},
		"38371": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": ""
		},
		"38372": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DMLEntitySchemaBuilder"
		},
		"38373": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "Schema"
		},
		"38374": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity"
		},
		"38375": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.isDmlEntity"
		},
		"38376": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.isDmlEntity"
		},
		"38377": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "entity"
		},
		"38378": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.__constructor"
		},
		"38379": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity"
		},
		"38380": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.Schema"
		},
		"38381": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.TConfig"
		},
		"38382": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "nameOrConfig"
		},
		"38383": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "schema"
		},
		"38384": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.name"
		},
		"38385": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.schema"
		},
		"38390": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.parse"
		},
		"38391": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.parse"
		},
		"38392": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type"
		},
		"38393": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.name"
		},
		"38394": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.tableName"
		},
		"38395": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.schema"
		},
		"38396": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.cascades"
		},
		"38397": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.indexes"
		},
		"38398": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "__type.checks"
		},
		"38399": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.cascades"
		},
		"38400": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.cascades"
		},
		"38401": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "options"
		},
		"38402": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.indexes"
		},
		"38403": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.indexes"
		},
		"38404": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "indexes"
		},
		"38405": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.checks"
		},
		"38406": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.checks"
		},
		"38407": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "checks"
		},
		"38408": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.[IsDmlEntity]"
		},
		"38409": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.Schema"
		},
		"38410": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/entity.ts",
			"qualifiedName": "DmlEntity.TConfig"
		},
		"38411": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": ""
		},
		"38412": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty"
		},
		"38415": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.T"
		},
		"38422": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.dataType"
		},
		"38423": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type"
		},
		"38424": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.name"
		},
		"38425": {
			"sourceFileName": "../../../../packages/core/types/src/dml/index.ts",
			"qualifiedName": "__type.options"
		},
		"38426": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.$dataType"
		},
		"38427": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.nullable"
		},
		"38428": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.nullable"
		},
		"38429": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.computed"
		},
		"38430": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.computed"
		},
		"38431": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.index"
		},
		"38432": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.index"
		},
		"38433": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "name"
		},
		"38434": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.unique"
		},
		"38435": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.unique"
		},
		"38436": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "name"
		},
		"38437": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.default"
		},
		"38438": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.default"
		},
		"38439": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "value"
		},
		"38440": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.parse"
		},
		"38441": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.parse"
		},
		"38442": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "fieldName"
		},
		"38443": {
			"sourceFileName": "../../../../packages/core/utils/src/dml/properties/base.ts",
			"qualifiedName": "BaseProperty.T"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/dml/entity-builder.ts",
			"2": "../../../../packages/core/utils/src/dml/entity.ts",
			"3": "../../../../packages/core/utils/src/dml/properties/base.ts"
		},
		"reflections": {
			"1": 38274,
			"2": 38371,
			"3": 38411
		}
	}
}
